Introduction:

  -> JavaScript is a lightweight interpreted or Just in time compiled programming language with first class functions.
  -> While it is most well-known as the scripting language for web pages, many non-browser environments also use it, such as Nodejs, Apache Couch DB and Adobe Acrobat.
  -> JavaScript is a prototype based, multiparadigm, single-threaded, dynamic language supporting object oriented, imperative and declarative styles.
  -> JavaScript is a cross platform, object-oriented scripting language used to make web pages interactive. There are also advanced server side versions of JavaScript
      such as Nodejs, which allow you to add more functionality to a website than downloading files


  -> JavaScript contains a standard library of objects such as Array, Map, Math and a core set of language elements such as operators, control structures and statements.

  -> Client Side JavaScript:

        - Client side JavaScript extends the core language by supplying objects to control a browser and its Document Object Model (DOM)
        - For example, client side extensions allow an application to place elements on an HTML Form and respond to user events such as mouse clicks, form input and page navigation.

  -> Server Side JavaScript:

        - Server side JavaScript extends the core language by supplying objects relevant to running JavaScript on a server.
        - For example, server side extensions allow an application to communicate with a database, provide continuity of information from one invocation to another or perform
          file manipulators on a server.

  -> JavaScript has a prototype based object model instead of common class-based object model.
  -> The prototype based model provides dynamic inheritance that is what is inherited can vary for individual objects.
  -> JavaScript also supports functions without any special declarative requirements.
  -> Functions can be properties of objects, executing as loosely typed methods.


Execution Context:

  -> Everything in JavaScript happens inside Execution Context

  -> Memory Component: 
        All variables, functions will be stored here as key value pairs
        Memory Component is also known as Variable Environment

  -> Code Component:
        Code is executed here line by line
        This is also known as "Thread of Execution"

  -> JavaScript is a synchronous single-threaded language


        






First-In-Class Functions:

  -> A programming language is said to have first-class functions when functions in that language are treated like any other variable.
  -> In such a language, a function can be passed as an argument to other functions, can be returned by another function and can be assigned as a value to variable.

      const foo = () => {
        console.log("foobar");
      };
      foo(); // Invoke it using the variable

  -> We assigned anonymous function in a variable then we can use that variable to invoke the function by adding () at the end.
  -> Even if the function was named, you can use the variable name to invoke it.

  Passing a function as an argument:

      function sayHello() {
        return "Hello, ";
      }
      function greeting(helloMessage, name) {
        console.log(helloMessage() + name);
      }
      // Pass `sayHello` as an argument to `greeting` function
      greeting(sayHello, "JavaScript!");
      // Hello, JavaScript

      We are passing our sayHello() function as an argument to the greeting() function, this explains how we are treating the function as a value.

  Returning a Function:

      function sayHello() {
        return () => {
          console.log("Hello!");
        };
      }

      Above, we are returning a function from another function. We can return a function because functions in JS are treated as values.

Higher-Order Functions:

  -> A function that returns a function or takes another function as argument is called as Higher-Order Function.
  


